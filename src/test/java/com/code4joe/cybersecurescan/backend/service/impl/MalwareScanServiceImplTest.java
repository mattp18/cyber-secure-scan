package com.code4joe.cybersecurescan.backend.service.impl;

import com.code4joe.cybersecurescan.shared.constant.MalwareScanConstants;
import com.code4joe.cybersecurescan.web.model.ScannedFile;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import xyz.capybara.clamav.ClamavClient;
import xyz.capybara.clamav.commands.scan.result.ScanResult;

import java.io.ByteArrayInputStream;
import java.lang.reflect.Constructor;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class MalwareScanServiceImplTest {

    @Mock
    private PdfServiceImpl pdfService;

    @Mock
    private ClamavClient clamavClient;

    @InjectMocks
    private MalwareScanServiceImpl malwareScanService;

    @Test
    void scanFilePass() {
        ScannedFile scannedFile = new ScannedFile();
        var stream = new ByteArrayInputStream("file".getBytes());

        when(clamavClient.scan(Mockito.any(ByteArrayInputStream.class))).thenReturn(createScanResultOK());

        String scanResult = malwareScanService.scanFile(stream, scannedFile);

        assertEquals(MalwareScanConstants.SCAN_RESULT_MESSAGE_PASS, scanResult);
    }

    //TODO: WILL COME BACK TO FINISH 11/19
//    @Test
//    void scanFileFail() {
//        ScannedFile scannedFile = new ScannedFile();
//        var stream = new ByteArrayInputStream("file".getBytes());
//
//        when(clamavClient.scan(Mockito.any(ByteArrayInputStream.class))).thenReturn(createScanResultVirusFound());
//
//        String scanResult = malwareScanService.scanFile(stream, scannedFile);
//
//        assertEquals(MalwareScanConstants.SCAN_RESULT_MESSAGE_FAIL, scanResult);
//    }

    // Helper method to create an instance of ScanResult.OK using reflection
    private ScanResult.OK createScanResultOK() {
        try {
            Constructor<ScanResult.OK> constructor = ScanResult.OK.class.getDeclaredConstructor();
            constructor.setAccessible(true);
            return constructor.newInstance();
        } catch (Exception e) {
            throw new RuntimeException("Failed to create ScanResult.OK instance", e);
        }
    }

    private ScanResult.VirusFound createScanResultVirusFound() {
        try {
            Constructor<ScanResult.VirusFound> constructor = ScanResult.VirusFound.class.getDeclaredConstructor();
            constructor.setAccessible(true);
            return constructor.newInstance();
        } catch (Exception e) {
            throw new RuntimeException("Failed to create ScanResult.VirusFound instance", e);
        }
    }
}